package com.mariosyian.contacts;
/**
 * Application to display GUI as a mobile device used to store contact
 * information of people and keep it saved in a text file within the same
 * directory as the JAVA Source File.
*/

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import javax.swing.*;

public class Device extends JFrame implements ActionListener {
	/**
	 * Automatically generated by eclipse
	 */
	private static final long serialVersionUID = 1L;
	
	private static int ID = 0;
	 
	/*----------Widgets----------*/
	  // Labels
	private JLabel nameLabel = new JLabel("Name:");
	private JLabel phoneLabel = new JLabel("Phone:");
	private JLabel emailLabel = new JLabel("EMail:");
	private JLabel ageLabel = new JLabel("Age:");
	private JLabel cityLabel = new JLabel("City:");
	private JLabel bdayLabel = new JLabel("Birthday:");
	private JLabel occupationLabel = new JLabel("Occupation:");
	  
	  // Buttons
	private JButton saveBtn = new JButton("Save");
	private JButton editBtn = new JButton("Edit");
	private JButton callBtn = new JButton("Call");
	private JButton delBtn = new JButton("Delete");
	
		// Layouts
	GridLayout mainGrid = new GridLayout(0,2);
	
	  // Text Fields
	private static JTextField nameTxt = new JTextField("NAME_FIELD");
	private static JTextField phoneTxt = new JTextField("PHONE_FIELD");
	private static JTextField emailTxt = new JTextField("EMAIL_FIELD");
	private static JTextField ageTxt = new JTextField("AGE_FIELD");
	private static JTextField cityTxt = new JTextField("CITY_FIELD");
	private static JTextField bdayTxt = new JTextField("BDAY_FIELD");
	private static JTextField occTxt = new JTextField("JOB_FIELD");
	  
		// Miscellaneous
	private final static String FILENAME = "src/com/mariosyian/contacts/data.txt";
	private File saveFile = new File(FILENAME);
	private PrintWriter fileWrite = null;
	private static BufferedReader read = null;
	
	public Device() {
	  setTitle("Device");
	    
	  Container device = getContentPane();
	  device.setLayout(mainGrid);
	     
	  device.add(nameLabel);
	  device.add(nameTxt);
	  device.add(phoneLabel);
	  device.add(phoneTxt);
	  device.add(emailLabel);
	  device.add(emailTxt);
	  device.add(ageLabel);
	  device.add(ageTxt);
	  device.add(cityLabel);
	  device.add(cityTxt);
	  device.add(bdayLabel);
	  device.add(bdayTxt);
	  device.add(occupationLabel);
	  device.add(occTxt);
	    
	  device.add(saveBtn);
	  device.add(editBtn);
	  device.add(callBtn);
	  device.add(delBtn);
	  
	  saveBtn.addActionListener(this);
	  callBtn.addActionListener(this);
	  editBtn.addActionListener(this);
	  delBtn.addActionListener(this);
	  
	  enableTxtFields(false);
	  
	    // x, y, width, height
	  setBounds(50, 50, 500, 250);
	  	// Fixed size
	  setResizable(false);
	  setDefaultCloseOperation(EXIT_ON_CLOSE);
	}
	
	/**
	 * Checks which button is pressed and does appropriate action
	 * call - TODO
	 * edit - TODO
	 * del - TODO
	 * save - Write data to file and reset the text fields.
	 * 
	 * @param event The button that was clicked
	 */
	@Override
	public void actionPerformed(ActionEvent event) {
		JButton source = null;
		if (event.getSource() instanceof JButton) {
			source = (JButton) event.getSource();
		} else {
			System.err.println("This is not a JButton...");
			return;
		}
		
		switch (source.getText()) {
			case "Call":
				callBtn.setText("PRESSED Call");
				break;
			
			case "Edit":
				enableTxtFields(true);
				editBtn.setText("Finish edit");
				break;
				
			case "Finish edit":
				enableTxtFields(false);
				editBtn.setText("Edit");
				break;
				
			case "Delete":
				delBtn.setText("PRESSED Delete");
				break;
			
			case "Save":
				try {
					write2File();
				} catch (Exception e) {
					System.err.println(e);
				}
				resetTxtFields(ID + ":" + nameTxt.getText());
				break;
			
			default:
				System.err.println("Source [" + source.getText() + "] is not recognised.");
		}
  }
  
	/**
	 * Combine and write text field contents into file
	 */
  private void write2File() {
    try {
      fileWrite = new PrintWriter(new FileWriter(saveFile, true));
      
      fileWrite.println(ID + ";" + nameTxt.getText() + ";" + phoneTxt.getText()  + ";" +
                        emailTxt.getText()  + ";" + ageTxt.getText()  + ";" +
                        cityTxt.getText()  + ";" + bdayTxt.getText()  + ";" +
                        occTxt.getText());
      ID ++;
      
      fileWrite.close();
    } catch (FileNotFoundException e) {
      System.out.println("No such file found!");
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (Exception e) {
      System.out.println(e.getMessage());
    }
  }
  
  /**
   * Enables or disables text fields
   * @param enable True to enable, false to disable text fields
   */
  private void enableTxtFields(boolean enable) {
	  nameTxt.setEnabled(enable);
	  phoneTxt.setEnabled(enable);
	  emailTxt.setEnabled(enable);
	  ageTxt.setEnabled(enable);
	  cityTxt.setEnabled(enable);
	  bdayTxt.setEnabled(enable);
	  occTxt.setEnabled(enable);
  }
  
  /**
   * Reset all text fields to empty and
   * create a new button for the new contact created
   * 
   * @param newName Name of the new contact
   */
  private void resetTxtFields(String newName) {
      nameTxt.setText("");
      phoneTxt.setText("");
      emailTxt.setText("");
      ageTxt.setText("");
      cityTxt.setText("");
      bdayTxt.setText("");
      occTxt.setText("");
      
      contacts.newBtn(newName);
  }
  
  	/*----------Mutator Methods----------*/
  public static String getContactName() {
  	return nameTxt.getText(); 
  }

  public static String getPhone() {
  	return phoneTxt.getText(); 
  }

  public static String getEmail() {
  	return emailTxt.getText(); 
  }

	public static String getAge() {
		return ageTxt.getText(); 
	}

	public static String getCity() {
		return cityTxt.getText(); 
	}

	public static String getBday() {
		return bdayTxt.getText(); 
	}

	public static String getOccupation() {
		return occTxt.getText(); 
	}
  
		/*----------Mutator Methods----------*/
	public static void setContactName(String data) {
		nameTxt.setText(data);
	}
      
	public static void setPhone(String data) {
		phoneTxt.setText(data); 
	}
      
	public static void setEmail(String data) {
		emailTxt.setText(data);
	}
      
	public static void setAge(String data) {
		ageTxt.setText(data);
	}
      
	public static void setCity(String data) {
		cityTxt.setText(data); 
	}
      
	public static void setBday(String data) {
		bdayTxt.setText(data); 
	}
      
	public static void setOccupation(String data) {
		occTxt.setText(data);
	}

  /**
   * Used to retrieve the unique ID for the next contact
   */
  private static void getID() {
    try {
      String line = "";
      read = new BufferedReader(new FileReader(FILENAME));
      
      while ((line = read.readLine()) != null) {
        String[] dataSplit = line.split(";");
        ID = Integer.parseInt(dataSplit[0]);
      }
      ID ++;
    } catch (FileNotFoundException e) {
      System.out.println("File does not exist.");
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (Exception e) {
      System.out.println(e.getMessage());
    }
  }
  
  	  // Declared class-scope to be manipulated - dispose, recreate etc
	private static Contacts contacts; 
	  
	public static void main(String[] args) {
		getID();
		Device device = new Device();
		device.setVisible(true);
		contacts = new Contacts(device.getX() + device.getWidth(), device.getY());
		contacts.setVisible(true);
	}
}
