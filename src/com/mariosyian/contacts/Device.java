package com.mariosyian.contacts;
/**
 * Application to display GUI as a mobile device used to store contact
 * information of people and keep it saved in a text file within the same
 * directory as the JAVA Source File.
*/

import java.awt.Container;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Date;
import java.util.Calendar;
import java.util.LinkedList;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.UIManager;

public class Device extends JFrame implements ActionListener {
	/**
	 * Automatically generated by eclipse
	 */
	private static final long serialVersionUID = 1L;
	
	private static int ID = 0;
	 
	/*----------Widgets----------*/
	  // Labels
	private JLabel nameLabel = new JLabel("Name:");
	private JLabel phoneLabel = new JLabel("Phone:");
	private JLabel emailLabel = new JLabel("EMail:");
	private JLabel ageLabel = new JLabel("Age:");
	private JLabel cityLabel = new JLabel("City:");
	private JLabel bdayLabel = new JLabel("Birthday:");
	private JLabel occupationLabel = new JLabel("Occupation:");
	private static JLabel IDLbl = new JLabel();
	  
	  // Buttons
	private JButton saveBtn = new JButton("Save");
	private JButton editBtn = new JButton("Edit");
	private JButton callBtn = new JButton("Call");
	private JButton delBtn = new JButton("Delete");
	
		// Layouts
	GridLayout mainGrid = new GridLayout(0,2);
	
	  // Text Fields
	private static JTextField nameTxt = new JTextField("NAME_FIELD");
	private static JTextField phoneTxt = new JTextField("PHONE_FIELD");
	private static JTextField emailTxt = new JTextField("EMAIL_FIELD");
	private static JTextField ageTxt = new JTextField("AGE_FIELD");
	private static JTextField cityTxt = new JTextField("CITY_FIELD");
	private static JTextField bdayTxt = new JTextField("YYYY-MM-DD");
	private static JTextField occTxt = new JTextField("JOB_FIELD");
	  
		// Miscellaneous
	private final static String FILENAME = "src/com/mariosyian/contacts/data.txt";
	private File saveFile = new File(FILENAME);
	private PrintWriter fileWrite = null;
	private static BufferedReader read = null;
	private String previousContact = "";
	
	public Device() {
	  setTitle("Device");
	    
	  Container device = getContentPane();
	  device.setLayout(mainGrid);

	  IDLbl.setVisible(false);
	  
	  device.add(nameLabel);
	  device.add(nameTxt);
	  device.add(phoneLabel);
	  device.add(phoneTxt);
	  device.add(emailLabel);
	  device.add(emailTxt);
	  device.add(ageLabel);
	  device.add(ageTxt);
	  device.add(cityLabel);
	  device.add(cityTxt);
	  device.add(bdayLabel);
	  device.add(bdayTxt);
	  device.add(occupationLabel);
	  device.add(occTxt);
	    
	  device.add(saveBtn);
	  device.add(editBtn);
	  device.add(callBtn);
	  device.add(delBtn);
	  
	  saveBtn.addActionListener(this);
	  callBtn.addActionListener(this);
	  editBtn.addActionListener(this);
	  delBtn.addActionListener(this);
	  
	  enableTxtFields(false);
	  
	    // x, y, width, height
	  setBounds(50, 50, 500, 250);
	  	// Fixed size
	  setResizable(false);
	  setDefaultCloseOperation(EXIT_ON_CLOSE);
	}
	
	/**
	 * Checks which button is pressed and does appropriate action
	 * call - TODO
	 * edit - TODO
	 * del - Delete currently selected record.
	 * save - Write data to file and reset the text fields.
	 * 
	 * @param event The button that was clicked
	 */
	@Override
	public void actionPerformed(ActionEvent event) {
		// Validate inputs before doing anything
		enableTxtFields(true);
		
		JButton source = null;
		if (event.getSource() instanceof JButton) {
			source = (JButton) event.getSource();
		} else {
			System.err.println("This is not a JButton...");
			return;
		}
		
		switch (source.getText()) {
			case "Call":
				callBtn.setText("PRESSED Call");
				break;
			
			case "Edit":
				enableTxtFields(true);
				editBtn.setText("Finish edit");
				previousContact = IDLbl.getText() + getTxtFieldInfo();
				break;
				
			// TODO
			case "Finish edit":
				enableTxtFields(false);
				editBtn.setText("Edit");
				if (!isValidInput()) { return; } // Validate Input
				deleteFromFile(previousContact);
				write2File();
				contacts.deleteBtn(IDLbl.getText() + ":" + nameTxt.getText());
				contacts.newBtn(ID + ":" + nameTxt.getText());
				ID ++;
				break;
				
			case "Delete":
				String currentID = IDLbl.getText();
				deleteFromFile(currentID + getTxtFieldInfo());
				resetTxtFields(currentID + ":" + nameTxt.getText(), false);
				break;
			
			case "Save":
				if (!isValidInput()) { return; } // Validate Input
				try {
					write2File();
				} catch (Exception e) {
					System.err.println(e);
				}
				resetTxtFields(ID + ":" + nameTxt.getText(), true);
				break;
			
			default:
				System.err.println("Source [" + source.getText() + "] is not recognised.");
		}
  }
  
	/**
	 * Combine and write text field contents into file
	 */
  private void write2File() {
  	try {
      fileWrite = new PrintWriter(new FileWriter(saveFile, true));
      fileWrite.println(ID + getTxtFieldInfo());
      fileWrite.close();
    } catch (FileNotFoundException e) {
      System.out.println("No such file found!");
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (Exception e) {
      System.out.println(e.getMessage());
    }
  }
  
  /**
   * Delete a listing from the file.
   * ID is left blank.
   * @param leaveOut Instance to delete from file.
   */
  public void deleteFromFile(String leaveOut) {
  	try {
  		read = new BufferedReader(new FileReader(FILENAME));
  		LinkedList<String> tempData = new LinkedList<String>();
      String line ="";
      // Read desired records into a list since file is reopened with append = false
      while ((line = read.readLine()) != null) {
      	if (!line.equals(leaveOut)) {
      		tempData.add(line);
      	}
      }
      read.close();
      // Rewrite data back to file
      fileWrite = new PrintWriter(new FileWriter(saveFile, false));
      for (String record : tempData) {
      	fileWrite.println(record);
      }
      fileWrite.close();
    } catch (FileNotFoundException e) {
      System.out.println("No such file found!");
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (Exception e) {
      System.out.println(e.getMessage());
    }
  }
  /**
   * TODO: Should I leave the ID here? Should I make new method one with getWithID and leave this as is?
   * @return String Returns all text field inputs as one ';' separated string WITHOUT ID.
   */
  private String getTxtFieldInfo() {
  	return ";" + nameTxt.getText() + ";" + phoneTxt.getText()  + ";" +
        emailTxt.getText()  + ";" + ageTxt.getText()  + ";" +
        cityTxt.getText()  + ";" + bdayTxt.getText()  + ";" +
        occTxt.getText();
  }
  
  /**
   * Enables or disables text fields
   * @param enable True to enable, false to disable text fields
   */
  private void enableTxtFields(boolean enable) {
	  nameTxt.setEnabled(enable);
	  phoneTxt.setEnabled(enable);
	  emailTxt.setEnabled(enable);
	  ageTxt.setEnabled(enable);
	  cityTxt.setEnabled(enable);
	  bdayTxt.setEnabled(enable);
	  occTxt.setEnabled(enable);
  }
  
  /**
   * Reset all text fields to empty and
   * create a new button for the new contact created.
   * 
   * @param newName Name of the new contact
   * @param create True if newBtn, false for deleteBtn
   */
  private void resetTxtFields(String newName, boolean create) {
  	IDLbl.setText("" + ID);
    nameTxt.setText("");
    phoneTxt.setText("");
    emailTxt.setText("");
    ageTxt.setText("");
    cityTxt.setText("");
    bdayTxt.setText("");
    occTxt.setText("");
      
    if (create) {
    	contacts.newBtn(newName);
    } else {
    	contacts.deleteBtn(newName);
    }
      
    ID ++; // Increment ID after writing to file and creating the new button
  }
  
  /**
   * Checks that all text field entries are valid.
   * Checks are made as follows:
   * Name - Not null
   * Phone - All numerics TODO: Add extension support
   * EMail - username and domain separated by @ and finishes with .com TODO: Recognise common domains
   * Age - Is numeric, non negative TODO: Compare against birthday
   * City - Not null TODO: Should this be an optional entry?
   * Birthday - Is valid date, ensure its not after todays date
   * Occupation - Not null TODO: Should this be an optional entry?
   * @return boolean True if all checks pass, false otherwise.
   */
  private boolean isValidInput() {
  	// Name
  	if (getContactName().length() <= 0) {
  		System.err.println("Name can not be left null.");
  		return false;
  	}
  	
  	// Phone
  	try {
  		long phone = Long.parseLong(getPhone());
  		if (phone <= 0) {
  			throw new Exception();
  		}
  	} catch (Exception e) {
  		System.err.println("This is not a valid phone number.");
  		return false;
  	}
  	
  	// Should this be its own method?? Too long
  	// EMail
  	// Consider marios@hotmail.com
  	if (!getEmail().contains("@")) {
  		System.err.println("This is not a valid email.");
  		return false;
  	} else {
  		String[] email = getEmail().split("@");
  		// Checks if @hotmail.com
  		if (email[0].length() == 0) {
  			System.err.println("The email username can not be null.");
    		return false;
    	// Checks if marios@
  		} else if (email.length < 2 && email[1].length() == 0) {
  			System.err.println("The email domain address can not be null.");
	  		return false;
  		} else {
  			// Checks if marios@hotmail | marios@hotmailcom
  			if (!email[1].contains(".")) {
  				System.err.println("This is not a valid domain address.");
  	  		return false;
  			}
//  			String[] domain = email[1].split(".");
  			// Checks if marios@.com
  			/*----- TODO: Check for more than one '.' e.g. student.university.ac.uk -----*/
//  			if (domain.length < 1 && domain[0].length() == 0) {
//  				System.err.println("The domain address can not be null.");
//  	  		return false;
//  	  	// Checks if marios@hotmail.
//  			} else if (domain.length < 2 && domain[1].length() == 0) {
//  				System.err.println("The domain extension can not be null.");
//  	  		return false;
//  			}
  		}
  	}
  	
  	// Age
  	try {
  		int age = Integer.parseInt(getAge());
  		if (age <= 0) {
  			throw new Exception();
  		}
  	} catch (Exception e) {
  		System.err.println("This is not a valid phone number.");
  		return false;
  	}
  	
  	// City
   	if (getCity().length() <= 0) {
   		System.err.println("City name can not be left empty ... for now.");
   		return false;
   	}
   	
   	// Birthday
   	try {
   		Date bday = Date.valueOf(getBday());
   		Calendar cal = Calendar.getInstance();
   		// Check if date entered is after todays date
   		if (bday.after(cal.getTime())) {
   			throw new IllegalArgumentException();
   		}
   		// TODO Check if date of birth matches age
//   		int currentYear = cal.get(Calendar.YEAR);
//   		int currentMonth = cal.get(Calendar.MONTH) + 1; // +1 because programming jokes start from 0
//   		int currentDay = cal.get(Calendar.DAY_OF_MONTH);
   		
   	} catch (IllegalArgumentException e) {
   		System.err.println("The date of birth can not be later than today.");
   		return false;
   	} catch (Exception e) {
   		System.err.println("This is not a valid yyyy-mm-dd format date.");
   		return false;
   	}
   	
   	// Occupation
   	if (getOccupation().length() <= 0) {
   		System.err.println("Occupation can not be left null.");
   		return false;
   	}
   	
  	return true;
  }
  
  
  	/*----------Mutator Methods----------*/
  public static String getIDLabel() {
  	return IDLbl.getText();
  }
  
  public static String getContactName() {
  	return nameTxt.getText(); 
  }

  public static String getPhone() {
  	return phoneTxt.getText(); 
  }

  public static String getEmail() {
  	return emailTxt.getText(); 
  }

	public static String getAge() {
		return ageTxt.getText(); 
	}

	public static String getCity() {
		return cityTxt.getText(); 
	}

	public static String getBday() {
		return bdayTxt.getText(); 
	}

	public static String getOccupation() {
		return occTxt.getText(); 
	}
  
		/*----------Mutator Methods----------*/
	public static void setIDLabel(String data) {
		IDLbl.setText(data);
	}
	
	public static void setContactName(String data) {
		nameTxt.setText(data);
	}
      
	public static void setPhone(String data) {
		phoneTxt.setText(data); 
	}
      
	public static void setEmail(String data) {
		emailTxt.setText(data);
	}
      
	public static void setAge(String data) {
		ageTxt.setText(data);
	}
      
	public static void setCity(String data) {
		cityTxt.setText(data); 
	}
      
	public static void setBday(String data) {
		bdayTxt.setText(data); 
	}
      
	public static void setOccupation(String data) {
		occTxt.setText(data);
	}

  /**
   * Used to retrieve the unique ID for the next contact
   */
  private static void getID() {
    try {
      String line = "";
      read = new BufferedReader(new FileReader(FILENAME));
      
      while ((line = read.readLine()) != null) {
        String[] dataSplit = line.split(";");
        ID = Integer.parseInt(dataSplit[0]);
      }
      ID ++;
    } catch (FileNotFoundException e) {
      System.out.println("File does not exist.");
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (Exception e) {
      System.out.println(e.getMessage());
    }
  }
  
  	  // Declared class-scope to be manipulated - dispose, recreate etc
	private static Contacts contacts; 
	  
	public static void main(String[] args) {
		getID();
		// Try to change look and feel to Windows Classic layout ** See documentation **
		try { 
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
	  } 
	  catch (Exception e) { 
	  	System.out.println("Look and Feel not set"); 
	  } 
		Device device = new Device();
		device.setVisible(true);
		contacts = new Contacts(device.getX() + device.getWidth(), device.getY());
		contacts.setVisible(true);
	}
}
