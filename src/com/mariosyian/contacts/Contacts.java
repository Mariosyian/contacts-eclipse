package com.mariosyian.contacts;

import java.awt.Container;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import javax.swing.JButton;
import javax.swing.JFrame;

public class Contacts extends JFrame implements ActionListener{
  /**
   * Automatically generated by eclipse
   */
  private static final long serialVersionUID = 1L;

  	//Text file data
  private String[] DATA = new String[1];
  private final int ARRAY_RESIZE = 2;
  
  private JButton[] buttons = new JButton[1];
  private int buttonIndex = 0;
  
    //Bounds for window
  int xCoord = 350;
  int yCoord = 50;
  int guiWidth = 125;
  int guiHeight = 400;
  
  public Contacts()
  {
    setTitle("Contacts");
    Container contacts = getContentPane();
    
    contacts.setLayout(new GridLayout(0,1));

    try
    {
      readFile(new File("data.txt"));
    } catch (Exception e) {
      System.err.println(e.getMessage());
    }

    for (int i=0; i < DATA.length; i++)
    {
      System.out.println(i + "," + buttonIndex);
      if (DATA[i] != null)
      {
        if (i >= buttons.length)
          buttons = (JButton[]) resizeArray(buttons);
        
        String[] dataSplit = DATA[i].split(";");
        
        buttons[buttonIndex] = new JButton(dataSplit[1]);
        buttons[buttonIndex].addActionListener(this);
        
        this.add(buttons[buttonIndex]);
      }
      
      buttonIndex ++;
    }
    
      /*
       * Instead of pack that shrinks gui to exactly required size
       * setBounds allows to set absolute size of window
       * x, y, width, height
      */
    setBounds(xCoord, yCoord, guiWidth, guiHeight);
    setDefaultCloseOperation(EXIT_ON_CLOSE);
  }

  public void actionPerformed(ActionEvent event)
  {
    System.out.println(buttons);
    JButton btn = (JButton) (event.getSource());
    String[] nameSplit = findName(btn.getText()).split(";");
    Device.setContactName(nameSplit[1]);
    Device.setPhone(nameSplit[2]);
    Device.setEmail(nameSplit[3]);
    Device.setAge(nameSplit[4]);
    Device.setCity(nameSplit[5]);
    Device.setBday(nameSplit[6]);
    Device.setOccupation(nameSplit[7]);
  }
  
    /*
     * TODO:
     * Method used to return the data of the button from the DATA array
     * This method will return the FIRST occurence so if there are at
     * least two contacts with the same name, the second one will not load.
    */
  private String findName(String nameToFind)
  {
    boolean flag = false;
    int i = 0;
    String[] nameSplit;
    
      //Always check the null first to avoid errors
    while (DATA[i] != null && i <= DATA.length && flag == false)
    {
      nameSplit = DATA[i].split(";");
      if (nameSplit[1].equals(nameToFind))
      {
        flag = true;
        return DATA[i];
      }
      i++;
    }
    return "0;NO;SUCH;CONTACT;INFORMATION;HAS;BEEN;FOUND";
  }
  
    /**
     * Method used to create any new buttons during runtime of program
     * @param name Button text to display
     */
  public void newBtn(String name)
  {
    //-1 added to ensure resize with less chance of ArrayIndexOutOfBounds error
    if (buttonIndex >= buttons.length - 1)
      buttons = (JButton[]) resizeArray(buttons);
      
    buttons[buttonIndex] = new JButton(name);
    buttons[buttonIndex].addActionListener(this);
    
    guiHeight += 35;
    this.setSize(guiWidth, guiHeight);
    
    getContentPane().add(buttons[buttonIndex]);
    
    buttonIndex ++;
  }
  
  private void readFile(File data) throws FileNotFoundException
  {
    BufferedReader read = new BufferedReader(new FileReader(data));
    String line = "";
    try {
      line = read.readLine();
    } catch (Exception e) {
      System.err.println(e.getMessage());
    }
    
    int index = 0;
    while (line != null)
    {
      DATA[index] = line;
      index ++;
      //Resize array as required;
      if (index >= DATA.length)
        DATA = (String[]) resizeArray(DATA);
        
        //Read next line at end of loop to ensure no skipping or extra iteration
      try {
        line = read.readLine();
      } catch (Exception e) {
        System.err.println(e.getMessage());
      }
    }
    
    try {
		read.close();
	} catch (IOException e) {
		System.err.println("Unable to close BufferedReader...");
	}
  }

    //Method used to return exact copy of param array but larger in size
  private Object[] resizeArray(Object[] original)
  {
    Object[] newData;
    if (original instanceof String[])
      newData = new String[original.length * ARRAY_RESIZE];
    else if (original instanceof JButton[])
      newData = new JButton[original.length * ARRAY_RESIZE];
    else
    {
      newData = null;
      System.out.println("Check instance definitions");
      System.exit(-1);
    }
    
    //Copy data from original into new one
    for (int i=0; i < original.length; i++)
    {
     newData[i] = original[i]; 
    }
    
    return newData;
  }
}